#!/bin/bash

# pipe stuff into this
function php_json_encode() {
    php -r 'print trim(json_encode(trim(stream_get_contents(fopen("php://stdin","r"))),JSON_HEX_TAG | JSON_HEX_APOS | JSON_HEX_AMP | JSON_HEX_QUOT),"\"");'
}

# 1 arg, object type to list
function get_list() {
    curl -s -L --connect-timeout 30 -H "Accept: application/vnd.api+json;" -H "Content-type: application/vnd.api+json" -XGET --user "$AUTH" "$SITE/jsonapi/node/$1"
}

# 1 arg.  short object version to convert
function abbr_object() {
    case "$1" in
    do)
          echo digital_object
          ;;
    dc)
          echo digital_object_collection
          ;;
    *)
          echo $1
          ;;
    esac
}

# pipe
function straw_extract_list() {
    jq -r '.data | .[] | .attributes.field_descriptive_metadata.value'
}
# pipe
function straw_extract_one() {
    jq -r '.data.attributes.field_descriptive_metadata.value'
}

# pipe data, 1 arg (the object type)
function straw_summarize() {
    case "$1" in
    digital_object)
          jq -c '[.strawberry_field_widget_source_entity_uuid,[.ismemberof],.label,.description,.subjects_local]'
          ;;
    digital_object_collection)
        jq -c '[.strawberry_field_widget_source_entity_uuid,(if .ismemberof != [] then [.ismemberof] else null end),.strawberry_field_widget_source_entity_id,.label,.description,.subjects_local]'
        ;;
    esac
}

# pipe
function strawattachments() {
    jq -c '{images,models,documents}'
}

# pipe
function strawdownloads() {
    #set -x
    jq '[(select(."as:image")|."as:image"|.[].url),(select(."as:model")|."as:model"|.[].url),(select(."as:document")|."as:document"|.[].url)] | .[]'  | sed -e 's#//#//'$AWSBUCKET/$AWSBUCKETPREFIX'/#' -e "s/^/aws --profile $AWSPROFILE s3 cp /" -e 's/$/ ./' |sh
    shopt -s nullglob
    for i in image*; do
        mv -i "$i" "$(echo $i | sed -e s/image-// -e 's/-[a-zA-Z0-9]\{8\}-[a-zA-Z0-9]\{4\}-[a-zA-Z0-9]\{4\}-[a-zA-Z0-9]\{4\}-[a-zA-Z0-9]\{12\}\././')"
    done
    for i in model*; do
        mv -i "$i" "$(echo $i | sed -e s/model-// -e 's/-[a-zA-Z0-9]\{8\}-[a-zA-Z0-9]\{4\}-[a-zA-Z0-9]\{4\}-[a-zA-Z0-9]\{4\}-[a-zA-Z0-9]\{12\}\././')"
    done
    for i in document*; do
        mv -i "$i" "$(echo $i | sed -e s/document-// -e 's/-[a-zA-Z0-9]\{8\}-[a-zA-Z0-9]\{4\}-[a-zA-Z0-9]\{4\}-[a-zA-Z0-9]\{4\}-[a-zA-Z0-9]\{12\}\././')"
    done
}

# 2 args:  obj, uuid
function fetch() {
    curl -s -L --connect-timeout 30 -H "Accept: application/vnd.api+json;" -H "Content-type: application/vnd.api+json" -XGET --user "$AUTH" "$SITE/jsonapi/node/$1/$2"
}

# 2 args: obj, search string
function titlesearch() {
    curl -s -L --connect-timeout 30 -H "Accept: application/vnd.api+json;" -H "Content-type: application/vnd.api+json" -XGET --user "$AUTH" "$SITE/jsonapi/node/$1?filter[ll][path]=title&filter[ll][operator]=CONTAINS&filter[ll][value]=$2"
}

# obj, filename, returns int
function uploadfile() {
    fn=$(basename "$2")
    curl -L --connect-timeout 30 -H "Accept: application/vnd.api+json;" -H "Content-Type: application/octet-stream;" -H "Content-Disposition: attachment; filename=\"$fn\"" --data-binary @"$2" --user "$AUTH" "$SITE/jsonapi/node/$1/field_file_drop"
}

# basic join command
function join_by { local IFS="$1"; shift; echo "$*"; }

# obj, files.   sets IMAGE / MODEL / DOC
function processfiles() {
    OBJ="$1"
    shift
    echo Processing files: "$@"
    documents=()
    # txt rtf pdf doc docx odt ppt pptx odp xls xlsx ods csv zip
    images=()
    # jp2 jpg jpeg png tif tiff svg
    models=()
    # stl obj
    for FILE in "$@"; do
        echo $FILE
        extension="${FILE##*.}"
        fileret=$(uploadfile "$OBJ" "$@")
        fileno=$(echo $fileret | jq .data.attributes.drupal_internal__fid)
        if [ "$fileno" = "" ]; then
            exit failed to upload $FILE
        fi
        echo "Fileno: $fileno  ($extension)"
        case "${extension,,}" in
            stl|obj)
                models+=( $fileno )
                ;;
            jp2|jpg|jpeg|png|tif|tiff|svg)
                images+=( $fileno )
                ;;
            *)
                documents+=( $fileno )
                ;;
        esac
    done
    IMAGE=$(join_by , "${images[@]}")
    MODEL=$(join_by , "${models[@]}")
    DOC=$(join_by , "${documents[@]}")
    echo images: $IMAGE models: $MODEL documents: $DOC
}

# IN: IMAGE / MODEL / DOC.    old strawberry  on stdin
function addfiles() {
    jq ".images += [$IMAGE]" | jq ".models += [$MODEL]" |jq ".documents += [$DOC]"
}

# obj uuid strawberry
function patchobj() {
    if [ "$3" = "" ]; then
        echo refusing blank push
        exit
    fi
    DATA=$(cat << EOF
{"data":{"id":"$2","type":"node--digital_object","attributes":{"field_descriptive_metadata":"$3"}}}
EOF
        )
    out=$(curl -L --connect-timeout 30 -H "Accept: application/vnd.api+json;" -H "Content-type: application/vnd.api+json" -XPATCH --data "$DATA" --user "$AUTH" "$SITE/jsonapi/node/$1/$2")
    echo $out > /tmp/fileupload.debug.$$
    if [ "$(echo $out | jq .errors)" != "" ]; then
        echo $out | jq .errors
    fi
    echo $out | straw_extract_one | straw_summarize "$1"
    echo $SITE/do/$2
}

# obj uuid true|false
function private() {
    DATA=$(cat << EOF
{"data":{"id":"$2","type":"node--$1","attributes":{"private":$3}}}
EOF
           )
    out=$(curl -L --connect-timeout 30 -H "Accept: application/vnd.api+json;" -H "Content-type: application/vnd.api+json" -XPATCH --data "$DATA" --user "$AUTH" "$SITE/jsonapi/node/$1/$2")
    echo $out > /tmp/fileupload.debug.$$
    if [ "$(echo $out | jq .errors)" != "" ]; then
        echo $out | jq .errors
    fi
    echo $out | straw_extract_one | straw_summarize "$1"
    echo $SITE/do/$2
}    

# stuff set in vars, bleh
function newdo() {
    DATA=$(cat << EOF
{"data":{"id":"$UUID","type":"node--digital_object","attributes":{"field_descriptive_metadata":"{\u0022type\u0022:\u00223DModel\u0022,\u0022viaf\u0022:[],\u0022label\u0022:\u0022$TITLE\u0022,\u0022description\u0022:\u0022$DESC\u0022,\u0022subjects_local\u0022:[$TAGS],\u0022owner\u0022:\u0022\u0022,\u0022audios\u0022:[],\u0022images\u0022:[$IMAGE],\u0022models\u0022:[$MODEL],\u0022rights\u0022:\u0022\u0022,\u0022videos\u0022:[],\u0022creator\u0022:[],\u0022duration\u0022:\u0022\u0022,\u0022ispartof\u0022:[],\u0022language\u0022:[],\u0022documents\u0022:[$DOC],\u0022edm_agent\u0022:[],\u0022publisher\u0022:\u0022\u0022,\u0022ismemberof\u0022:\u0022$GRP\u0022,\u0022issue_info\u0022:[],\u0022creator_lod\u0022:[],\u0022interviewee\u0022:[],\u0022interviewer\u0022:[],\u0022subject_loc\u0022:[],\u0022website_url\u0022:\u0022\u0022,\u0022date_created\u0022:\u0022\u0022,\u0022website_type\u0022:\u0022\u0022,\u0022date_published\u0022:\u0022\u0022,\u0022term_aat_getty\u0022:[],\u0022ap:entitymapping\u0022:{\u0022entity:file\u0022:[\u0022images\u0022,\u0022documents\u0022,\u0022audios\u0022,\u0022videos\u0022,\u0022models\u0022,\u0022upload_associated_warcs\u0022],\u0022entity:node\u0022:[\u0022ismemberof\u0022,\u0022ispartof\u0022]},\u0022local_identifier\u0022:\u0022\u0022,\u0022subject_wikidata\u0022:[],\u0022rights_statements\u0022:\u0022\u0022,\u0022geographic_location\u0022:null,\u0022subject_lcgft_terms\u0022:[],\u0022upload_associated_warcs\u0022:[],\u0022strawberry_field_widget_id\u0022:\u0022descriptive_metadata\u0022,\u0022subject_lcnaf_personal_names\u0022:[],\u0022subject_lcnaf_corporate_names\u0022:[],\u0022subjects_local_personal_names\u0022:[],\u0022subject_lcnaf_geographic_names\u0022:[],\u0022strawberry_field_widget_source_entity_uuid\u0022:\u0022$UUID\u0022}","title":"$TITLE","moderation_state":"published"}}}
EOF
        )
    out=$(curl -L --connect-timeout 30 -H "Accept: application/vnd.api+json;" -H "Content-type: application/vnd.api+json" -XPOST --data "$DATA" --user "$AUTH" "$SITE/jsonapi/node/digital_object")
    echo "$DATA" > /tmp/$$.data
    if [ "$(echo $out | jq .errors)" != "" ]; then
        echo $out | jq .errors
    fi
    echo $out | straw_extract_one | straw_summarize "digital_object"
    echo $SITE/do/$UUID
}

    
# stuff set in vars, bleh
function newdc() {
    DATA=$(cat << EOF
{
  "data": { 
    "type": "node--digital_object_collection",
    "id": "$UUID",
    "attributes": {
      "title": "$TITLE",
      "moderation_state": "published",
      "field_descriptive_metadata": {
        "value": "{\u0022type\u0022: \u0022Collection\u0022, \u0022label\u0022: \u0022$TITLE\u0022, \u0022owner\u0022: \u0022\u0022, \u0022images\u0022: [$IMAGE], \u0022rights\u0022: \u0022\u0022, \u0022language\u0022: [], \u0022edm_agent\u0022: [], \u0022publisher\u0022: \u0022\u0022, \u0022ismemberof\u0022: \u0022$GRP\u0022, \u0022description\u0022: \u0022$DESC\u0022, \u0022subject_loc\u0022: [], \u0022subjects_local\u0022: [$TAGS], \u0022term_aat_getty\u0022: [], \u0022ap:entitymapping\u0022: {\u0022entity:file\u0022: [\u0022images\u0022], \u0022entity:node\u0022: [\u0022ismemberof\u0022]}, \u0022subject_wikidata\u0022: [], \u0022rights_statements\u0022: \u0022\u0022, \u0022geographic_location\u0022: null, \u0022subject_lcgft_terms\u0022: [], \u0022strawberry_field_widget_id\u0022: \u0022digital_object_collection\u0022, \u0022subject_lcnaf_personal_names\u0022: [], \u0022subject_lcnaf_corporate_names\u0022: [], \u0022subjects_local_personal_names\u0022: [], \u0022subject_lcnaf_geographic_names\u0022: [], \u0022strawberry_field_widget_autosave\u0022: false, \u0022strawberry_field_widget_source_entity_uuid\u0022: \u0022$UUID\u0022, \u0022viaf_virtual_international_authority_file_\u0022: []}"
      }
    }
  }
}
EOF
        )
    out=$(curl -L --connect-timeout 30 -H "Accept: application/vnd.api+json;" -H "Content-type: application/vnd.api+json" -XPOST --data "$DATA" --user "$AUTH" "$SITE/jsonapi/node/digital_object_collection")
    echo "$DATA" > /tmp/$$.data
    if [ "$(echo $out | jq .errors)" != "" ]; then
        echo $out | jq .errors
    fi
    echo $out | straw_extract_one | straw_summarize "digital_object_collection"
    echo $SITE/do/$UUID
}

    
